# http://deerchao.net/tutorials/regex/regex.htm
# This used to save Regex tests. 2015-06-11

# Phone number
\(?0\d{2}\)?[- ]?\d{8}|0\d{2}[- ]?\d{8}

# 邮编(美)
\d{5}-\d{4}|\d{5}

# IP
(\d{1,3}\.){3}\d{1,3}
((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)


表1.常用的元字符
代码	说明
.	匹配除换行符以外的任意字符
\w	匹配字母或数字或下划线或汉字
\s	匹配任意的空白符
\d	匹配数字
\b	匹配单词的开始或结束
^	匹配字符串的开始
$	匹配字符串的结束


表2.常用的限定符
代码/语法	说明
*	重复零次或更多次
+	重复一次或更多次
?	重复零次或一次
{n}	重复n次
{n,}	重复n次或更多次
{n,m}	重复n到m次


表3.常用的反义代码
代码/语法   说明
\W  匹配任意不是字母，数字，下划线，汉字的字符
\S  匹配任意不是空白符的字符
\D  匹配任意非数字的字符
\B  匹配不是单词开头或结束的位置
[^x]    匹配除了x以外的任意字符
[^aeiou]    匹配除了aeiou这几个字母以外的任意字符   

# 后向引用 \1 
\b(\w+)\b\s+\1\b
\b(?<Word>\w+)\b\s+\k<Word>\b
## 指定组名
(?<Word>\w+)
(?'Word'\w+)
捕获 --> \k<word>


表4.常用分组语法 分类 	代码/语法 	说明
捕获 	
(exp) 	匹配exp,并捕获文本到自动命名的组里
(?<name>exp) 	匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp)
(?:exp) 	匹配exp,不捕获匹配的文本，也不给此分组分配组号
零宽断言 	
(?=exp) 	匹配exp前面的位置
(?<=exp) 	匹配exp后面的位置
(?!exp) 	匹配后面跟的不是exp的位置
(?<!exp) 	匹配前面不是exp的位置
注释 	
(?#comment) 	这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读


# 零宽断言
\b ^ $
## 零宽度正预测先行断言
\b\w+(?=ing\b)
## 零宽度正回顾后发断言
(?<=\bre)\w+\b
((?<=\d)\d{3})+\b # 给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)
(?<=\s)\d+(?=\s) # 匹配以空白符间隔的数字(再次强调，不包括这些空白符)

# 负向零宽断言
\b\w*q[^u]\w*\b # 匹配包含后面不是字母u的字母q的单词
\b\w*q(?!u)\w*\b # 你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的\w*\b将会匹配下一个单词，于是\b\w*q[^u]\w*\b就能匹配整个Iraq fighting。负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。
## 零宽度负预测先行断言
\d{3}(?!\d) # 匹配三位数字，而且这三位数字的后面不能是数字
\b((?!abc)\w)+\b # 匹配不包含连续字符串abc的单词
## 零宽度负回顾后发断言
(?<![a-z])\d{7} # 前面不是小写字母的七位数字
(?<=<(\w+)>).*(?=<\/\1>) # 匹配不包含属性的简单HTML标签内里的内容
